
// Copyright Â©, 2023-present, Lightspark Group, Inc. - All Rights Reserved
package objects




type AccountToTransactionsConnection struct {

    // Count The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
    Count int64 `json:"account_to_transactions_connection_count"`

    // PageInfo An object that holds pagination information about the objects in this connection.
    PageInfo PageInfo `json:"account_to_transactions_connection_page_info"`

    // ProfitLoss Profit (or loss) generated by the transactions in this connection, with the set of filters and constraints provided.
    ProfitLoss *CurrencyAmount `json:"account_to_transactions_connection_profit_loss"`

    // AverageFeeEarned Average fee earned for the transactions in this connection, with the set of filters and constraints provided.
    AverageFeeEarned *CurrencyAmount `json:"account_to_transactions_connection_average_fee_earned"`

    // TotalAmountTransacted Total amount transacted by the transactions in this connection, with the set of filters and constraints provided.
    TotalAmountTransacted *CurrencyAmount `json:"account_to_transactions_connection_total_amount_transacted"`

    // Entities The transactions for the current page of this connection.
    Entities []Transaction `json:"account_to_transactions_connection_entities"`

    // Typename The typename of the object
    Typename string `json:"__typename"`

}

const (
    AccountToTransactionsConnectionFragment = `
fragment AccountToTransactionsConnectionFragment on AccountToTransactionsConnection {
    __typename
    account_to_transactions_connection_count: count
    account_to_transactions_connection_page_info: page_info {
        __typename
        page_info_has_next_page: has_next_page
        page_info_has_previous_page: has_previous_page
        page_info_start_cursor: start_cursor
        page_info_end_cursor: end_cursor
    }
    account_to_transactions_connection_profit_loss: profit_loss {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_average_fee_earned: average_fee_earned {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_total_amount_transacted: total_amount_transacted {
        __typename
        currency_amount_original_value: original_value
        currency_amount_original_unit: original_unit
        currency_amount_preferred_currency_unit: preferred_currency_unit
        currency_amount_preferred_currency_value_rounded: preferred_currency_value_rounded
        currency_amount_preferred_currency_value_approx: preferred_currency_value_approx
    }
    account_to_transactions_connection_entities: entities {
        id
    }
}
`
)




// GetCount The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
func (obj AccountToTransactionsConnection) GetCount() int64 {
    return obj.Count
}

// GetPageInfo An object that holds pagination information about the objects in this connection.
func (obj AccountToTransactionsConnection) GetPageInfo() PageInfo {
    return obj.PageInfo
}


    func (obj AccountToTransactionsConnection) GetTypename() string {
        return obj.Typename
    }





type AccountToTransactionsConnectionJSON struct {

    // Count The total count of objects in this connection, using the current filters. It is different from the number of objects returned in the current page (in the `entities` field).
    Count int64 `json:"account_to_transactions_connection_count"`

    // PageInfo An object that holds pagination information about the objects in this connection.
    PageInfo PageInfo `json:"account_to_transactions_connection_page_info"`

    // ProfitLoss Profit (or loss) generated by the transactions in this connection, with the set of filters and constraints provided.
    ProfitLoss *CurrencyAmount `json:"account_to_transactions_connection_profit_loss"`

    // AverageFeeEarned Average fee earned for the transactions in this connection, with the set of filters and constraints provided.
    AverageFeeEarned *CurrencyAmount `json:"account_to_transactions_connection_average_fee_earned"`

    // TotalAmountTransacted Total amount transacted by the transactions in this connection, with the set of filters and constraints provided.
    TotalAmountTransacted *CurrencyAmount `json:"account_to_transactions_connection_total_amount_transacted"`

    // Entities The transactions for the current page of this connection.
    Entities []map[string]interface{} `json:"account_to_transactions_connection_entities"`

    // Typename The typename of the object
    Typename string `json:"__typename"`

}


func (data *AccountToTransactionsConnection) UnmarshalJSON(dataBytes []byte) error {
    var temp AccountToTransactionsConnectionJSON
	if err := json.Unmarshal(dataBytes, &temp); err != nil {
		return err
	}

	
    data.Count = temp.Count


    data.PageInfo = temp.PageInfo


    data.ProfitLoss = temp.ProfitLoss


    data.AverageFeeEarned = temp.AverageFeeEarned


    data.TotalAmountTransacted = temp.TotalAmountTransacted


    if temp.Entities != nil {
        var entities []Transaction
        for _, json := range temp.Entities {
            entity, err := TransactionUnmarshal(json)
            if err != nil {
                return err
            }
            entities = append(entities, entity)
        }
        data.Entities = entities
    }


    data.Typename = temp.Typename


    return nil
}


